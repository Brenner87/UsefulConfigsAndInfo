 -----------------------------------
| GIT workflow (simply)				| 
| 1.	Make a change				|
| 2.	Add the change				|
| 3.	Make a commit to repo		|
 -----------------------------------
git init							- initialize the git repository
	e.g. git init; git add .; git commit -m "first commit"
git add <file_name>					- add to staging
git add .							- add all files to the staging
------------
git commit -m "first commit"		- commit with comment
git commit -am "first commit"		- add all and commit with comment
git commit --amend -m <message>		- ammend message in the last commit
------------
git checkout <file_name>			- revert changes of file name
git checkout -- index.html			- revert changes of file name in the same branch
	good practice to use "--", otherwise, if we have a branch with <file_name> name, Git will switch to this branch
git checkout <id>					- revert all changes to the state <id>
	e.g. git checkout 9fd4be5db58c0cfae4ad214d2fb0ce9f1772d360
git checkout <branch_name>			- switch to the branch
git checkout <branch_name>			- go to the latest commit in the branch
		-b <branch_name>			- create new branch and switch to it
	e.g. git checkout -b 02_01 origin/02_01
------------
git status 							- get current status
------------
git branch							- get current branch name
git branch <branch_name>			- create new branch, but not switch to it
git branch alternate <id>
		-m app01 app1				- rename branch from app01 to app1
		-d <branch_name>			- delete the branch (safety)
		-D <branch_name>			- delete the branch (force)
		-a							- show all branches even they were not downloaded (only info)
------------
git merge <branch_name>				- merge current branch with the mentioned
------------
git clone <url>						- clone git project from the <url> source
git clone -b 00_start <link>		- clone certain branch
	e.g. git clone -b 00_start https://github.com/planetoftheweb/responsivebootstrap.git
------------
git remote show origin				- get info about source URL etc.
git remote -v						- get URL
------------
git config --global user.name "Ozik"				- global config, change name
git config --global user.email "ozi@mail.com"		- global config, change email 
git config user.name				- check config user name
git config user.email				- check config user email
git config credential.helper 'store'- save credentials to the file ~/.git-credentials (unsecure)	
git config --global credential.helper 'cache --timeout=3600'	- remember credetials for 1h
-------------
git diff							- show the changes in all files between working dir and staging
git diff <file>						- show the changes in certain file
git diff d9d8836					- show difference between HEAD and commit
git diff 89a1a85..d9d8836			- difference between two commits
git diff 89a1a85..d9d8836 <file>	- difference between two commits of file
	--stat --summary c63bd28..HEAD	- usefull example of short info
	--staged						- show the changes for statged files
	--cached 						- the same as staged, depricated
	--color-words contact.html		- shows changes not in lines but in values
	-b c63bd28..HEAD				- the same as --ignore-space-change
	-w c63bd28..HEAD				- the same as --ignore-all-space
-------------
git rm <file>						- delete file from index
git rm --cached tempfile2.txt		- delete file from the Staged index
-------------
git mv <file> <file1>				- rename (move) file in index
-------------
git revert <HASH>					- this is new commit (revert changes), doesn't impact history
-------------
git reset HEAD <file>				- unstage file
git reset							- we have A, B, C commits, do reset to the specified commit
	--soft B						- moves HEAD to the B state but change nothing in Staging or Working
	--mixed(default) B				- moved HEAD to the B state and change Staging to B but not Working
	--hard							- moved HEAD, Staging and Working to the stage B
git clean							- delete all untracked files
-------------
git ls-tree	HEAD					- show tree-ish of the files
git ls-tree master					- show tree-ish of the files
git ls-tree master^					- show tree-ish of the files previous commit
	master^^ or master~2			- two commits before
	in the output "blob"				- any file
	in the output "tree"			- any dirrectory
-------------
git log 							- get all commits
		--oneline					- show history in short format
		--format=oneline			- show history in short format with full SHA
		--oneline -3				- show last 3 commits 
		--since="2016-05-20"		- all commits from mentioned time
		--after="2016-05-20"		- all commits from mentioned time
		--untill="2016-05-20"		- all commits before mentioned time
		--author="Ozi"
		--grep="Init"				- get all commits with "Init" in description
		--oneline d9d8836..a5fc83e	- show all commits between two
		d9d8836..a5fc83e index.html	- show all commits for certain file
		--stat --summary
		--graph						- show branches in graph
git show <SHA of the commit>		- show full info about the commit with diff
git show <tree-ish>					- show content of object
git show HEAD						- show info about last commit
git show HEAD^						- show info about previous commit
git show HEAD^^						- show info about two commits ago
-------------
git merge seo_title					- merge seo_tile branch into current (master?)
git merge --abort					- abort current merge which is in progress
----------------------------------------------------------------------------



rm -rf .git							- delete all information about versions
https://github.com/github/gitignore

My log
==================================================================================================
git checkout -b py3_01				- create branch py3_01
git push origin py3_01				- push to GitHub
git add `git status | grep modified | sed 's/\(.*modified:\s*\)//'`
	add only modified files to the staging

Old:
PS1='\[\033]0;$TITLEPREFIX:$PWD\007\]\n\[\033[32m\]\u@\h \[\033[35m\]$MSYSTEM \[\033[33m\]\w\[\033[36m\]`__git_ps1`\[\033[0m\]\n$'

New:
export PS1=':> \[\033]0;$PWD `__git_ps1`\007\]\[\033[33m\]\w\[\033[36m\]`__git_ps1`\[\033[0m\]\n\033[38;5;10m\]$\033[0m\] '

-------------------------------------------------------------------------------------
Ctrl + a – go to the start of the command line
Ctrl + e – go to the end of the command line
Alt + b – move backward one word (or go to start of word the cursor is currently on)
Alt + f – move forward one word (or go to end of word the cursor is currently on)
-------------------------------------------------------------------------------------
Ctrl + k – delete from cursor to the end of the command line
Ctrl + u – delete from cursor to the start of the command line
-------------------------------------------------------------------------------------
Ctrl + w – delete from cursor to start of word (i.e. delete backwards one word)
Alt + d – delete to end of word starting at cursor (whole word if cursor is at the beginning of word)
-------------------------------------------------------------------------------------
Ctrl + y – paste word or text that was cut using one of the deletion shortcuts (such as the one above) after the cursor
Ctrl + xx – move between start of command line and current cursor position (and back again)
-------------------------------------------------------------------------------------
Alt + c – capitalize to end of word starting at cursor (whole word if cursor is at the beginning of word)
Alt + u – make uppercase from cursor to end of word
Alt + l – make lowercase from cursor to end of word
Alt + t – swap current word with previous
Ctrl + f – move forward one character
Ctrl + b – move backward one character
Ctrl + d – delete character under the cursor
Ctrl + h – delete character before the cursor
Ctrl + t – swap character under cursor with the previous one
-------------------------------------------------------------------------------------
